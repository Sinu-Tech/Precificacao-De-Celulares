# -*- coding: utf-8 -*-
"""PrecificacaoDeCelulares.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P3h627mrTATSG1EbyACy9QabLeehu_AX
"""

import pandas as pd
import plotly.express as px
from sklearn.metrics import accuracy_score
from sklearn import preprocessing
from sklearn.tree import DecisionTreeClassifier

base_treino = pd.read_csv('/content/sample_data/train.csv')
base_teste = pd.read_csv('/content/sample_data/test.csv')

base_treino.describe()

base_treino.isnull().sum()

grafico = px.box(base_treino, y='battery_power')
grafico.show()

grafico = px.box(base_treino, y='clock_speed')
grafico.show()

grafico = px.box(base_treino, y='fc')
grafico.show()

grafico = px.box(base_treino, y='int_memory')
grafico.show()

grafico = px.box(base_treino, y='mobile_wt')
grafico.show()

grafico = px.box(base_treino, y='n_cores')
grafico.show()

grafico = px.box(base_treino, y='pc')
grafico.show()

grafico = px.box(base_treino, y='px_height')
grafico.show()

grafico = px.box(base_treino, y='px_width')
grafico.show()

grafico = px.box(base_treino, y='ram')
grafico.show()

grafico = px.box(base_treino, y='sc_h')
grafico.show()

grafico = px.box(base_treino, y='sc_w')
grafico.show()

grafico = px.box(base_treino, y='talk_time')
grafico.show()

grafico = px.box(base_treino, y='price_range')
grafico.show()

base_teste.drop(["id"], axis=1)

atributos = base_treino.iloc[:, :20]
print(atributos)

classes = base_treino.loc[:, ['price_range']]
print(classes)

qt = preprocessing.QuantileTransformer() 
atributos_normalizados = qt.fit_transform(atributos)

mas = preprocessing.MaxAbsScaler()
atributos_normalizados = mas.fit_transform(atributos)

nm = preprocessing.Normalizer()
atributos_normalizados = nm.fit_transform(atributos)

ss = preprocessing.StandardScaler()
atributos_normalizados = ss.fit_transform(atributos)

mms = preprocessing.MinMaxScaler()
atributos_normalizados = mms.fit_transform(atributos)

modelo = DecisionTreeClassifier()
modelo.fit(atributos_normalizados, classes)

print(f'Acur√°cia: {modelo.score(atributos_normalizados, classes)*100}')

pred = modelo.predict(atributos)

print(f'esperado: {classes}, resultado: {pred}')